/*
 *  BEGIN_COPYRIGHT
 *
 *  Copyright (C) 2011-2013 deCODE genetics Inc.
 *  Copyright (C) 2013-2019 WuXi NextCode Inc.
 *  All Rights Reserved.
 *
 *  GORpipe is free software: you can redistribute it and/or modify
 *  it under the terms of the AFFERO GNU General Public License as published by
 *  the Free Software Foundation.
 *
 *  GORpipe is distributed "AS-IS" AND WITHOUT ANY WARRANTY OF ANY KIND,
 *  INCLUDING ANY    IMPLIED WARRANTY OF MERCHANTABILITY,
 *  NON-INFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE. See
 *  the AFFERO GNU General Public License for the complete license terms.
 *
 *  You should have received a copy of the AFFERO GNU General Public License
 *  along with GORpipe.  If not, see <http://www.gnu.org/licenses/agpl-3.0.html>
 *
 *  END_COPYRIGHT
 */

description = """GOR Gradle build script"""

// Configure the build script repositories and dependencies, must be defined in the top level gradle file.
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "kr.motd.gradle:sphinx-gradle-plugin:2.6.1"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8.0.1969"
        classpath "org.jacoco:org.jacoco.agent:0.8.5"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.10.0"
        classpath "org.owasp:dependency-check-gradle:5.3.0"  // Can not be updated to 5. unless we update SonarQube.
        classpath "de.undercouch:gradle-download-task:4.0.4"

        // The following plugins are support plugins that don't effect the build directly.
        // Therefore, we can set them to the meta-version 'latest.release'
        classpath "com.adarshr:gradle-test-logger-plugin:latest.release"
        classpath "com.netflix.nebula:gradle-lint-plugin:latest.release"
        classpath "gradle.plugin.com.gitlab.stfs.gradle.dependencygraph:gradle-dependency-graph-plugin:latest.release"

        // For GitLab licences scanning
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:latest.release"
    }
}

version = new File("${rootDir}/version").text.trim()

apply from: "${rootDir}/gradle/util.gradle"

apply plugin: "com.gitlab.stfs.gradle.dependency-graph-plugin"

allprojects {
    apply plugin: "idea"
    
    apply plugin: 'nebula.lint'
    gradleLint {
        rules = ['all-dependency']
        alwaysRun = false
    }
}

configure(allLeafProjects()) {
    version = rootProject.version

    apply plugin: "java"

    apply plugin: "com.adarshr.test-logger"

    apply plugin: "jacoco"

    apply plugin: "com.github.hierynomus.license"
    licenseMain.onlyIf { rootProject.file('LICENSE ').exists() }
    licenseTest.onlyIf { rootProject.file('LICENSE ').exists() }

    dependencyLocking {
        lockAllConfigurations()
    }

    // -----------------------------------------------------
    // Set source dirs, configurations, dependencies and repos
    // -----------------------------------------------------

    // Common repositories, dependencies and jar.
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        /*maven {
            name = "gor"
            url = uri("https://maven.pkg.github.com/sigmarkarl/gor")
            credentials {
                username = "sigmarkarl" //project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = System.getenv("MAVEN_TOKEN")
            }
        }*/
        maven {
            name = "glow"
            url = uri("https://maven.pkg.github.com/sigmarkarl/glow")
            credentials {
                username = project.findProperty('github_user') ?: System.getenv("GITHUB_USER")
                password = project.findProperty('github_token') ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }

    jar {
        manifest manifestTemplate
        baseName = getProjectFullName()
    }

    // Copy resources also from the source folder (in addition to the default
    // resource folder).
    sourceSets.main.resources {
        srcDirs = ["src/main/resources", "src/main/scala", "src/main/java"];
        exclude "**/*.java"
    }


    configurations.all {
        // cache dynamic versions for 10 minutes
        resolutionStrategy.cacheDynamicVersionsFor 10 * 60, 'seconds'
        // don't cache changing modules at all
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'

        // See http://buransky.com/programming/exclude-log4j-to-use-slf4j-with-logback-in-a-gradle-project/
        // Need to exclude the slf4j-simple as we are using another bindings.
        exclude group: 'org.slf4j', module: 'slf4j-simple'
        exclude group: "org.slf4j", module: "slf4j-log4j12"
        exclude group: "log4j", module: "log4j"
        // Exclude commons-logging for allprojects(we'll use the slf4j bridges)
        exclude module: 'commons-logging'
    }
    
    // Common repositories
    dependencies {
        testCompile 'junit:junit:4.12'
    }

    // -----------------------------------------------------
    // Common tests setup.
    // -----------------------------------------------------

    tasks.withType(Test) {
        // Read properties from config file.
        Properties props = new Properties()
        //props.load(new FileInputStream("${project.rootDir}/tests/config/unittest.sysproperties"))
        systemProperties = props

        // Set logback config file.
        systemProperty 'logback.configurationFile', new File("${project.rootDir}/tests/config/logback-test.xml").absolutePath

        // Should test failures be ignored?
        ignoreFailures = false

        // What parameters should be logged out
        testLogging {
            events "failed", "passed", "skipped", "standardError", "standardOut"
            showExceptions = false
            showCauses = false
            showStackTraces = false
            showStandardStreams = false

            debug {
                events "failed", "passed", "skipped", "standardError", "standardOut"
                exceptionFormat "full"
            }

            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) {
                    def res = "${result.resultType} " +
                            "(${result.testCount} tests, " +
                            "${result.successfulTestCount} successes, " +
                            "${result.failedTestCount} failures, " +
                            "${result.skippedTestCount} skipped)"
                    println(res)
                }
            }
        }
    }

    test {
        onlyIf { ! Boolean.getBoolean('skip.tests') }

        useJUnit {
            excludeCategories 'org.gorpipe.test.IntegrationTests'
            excludeCategories 'org.gorpipe.test.SlowTests'
            excludeCategories 'org.gorpipe.test.LoadTests'
            excludeCategories 'org.gorpipe.test.DbTests'
        }

        reports {
            junitXml.enabled = true
            html.enabled = true
        }
    }

    task slowTest(type: Test) {
        onlyIf { ! Boolean.getBoolean('skip.tests') }

        useJUnit {
            includeCategories 'org.gorpipe.test.SlowTests'
        }

        reports.html.setDestination(new File("$buildDir/reports/slowTests"))
    }

    task dbTest(type: Test) {
        onlyIf { ! Boolean.getBoolean('skip.tests') }

        useJUnit {
            includeCategories 'org.gorpipe.test.DbTests'
        }

        reports.html.setDestination(new File("$buildDir/reports/dbTests"))
    }

    // See: https://github.com/junit-team/junit/wiki/Categories
    task integrationTest(type: Test) {
        onlyIf { ! Boolean.getBoolean('skip.tests') }
        
        useJUnit {
            includeCategories 'org.gorpipe.test.IntegrationTests'
        }

        reports.html.setDestination(new File("$buildDir/reports/integrationTests"))
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    // -----------------------------------------------------
    // Common additional tasks.
    // -----------------------------------------------------

    // Helper task to print out dependencies.
    task allDeps(type: DependencyReportTask) {}

    // Builds sources to be distributed with jars (Maven).
    task sourcesJar(type: Jar) {
        baseName = getProjectFullName()
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    // Builds java doc jar to be distributed with jars (Maven).
    task javadocJar(type: Jar, dependsOn: javadoc) {
        baseName = getProjectFullName()
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    tasks.withType(Zip) {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    tasks.withType(ScalaCompile) {
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
        scalaCompileOptions.additionalParameters = ["-Xno-patmat-analysis"]
    }
}

if (file("build.deploy.gradle").exists()) {
    apply from: "build.deploy.gradle"
}
