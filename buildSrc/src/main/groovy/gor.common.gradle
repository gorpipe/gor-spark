/*
 *  BEGIN_COPYRIGHT
 *
 *  Copyright (C) 2011-2013 deCODE genetics Inc.
 *  Copyright (C) 2013-2019 WuXi NextCode Inc.
 *  All Rights Reserved.
 *
 *  GORpipe is free software: you can redistribute it and/or modify
 *  it under the terms of the AFFERO GNU General Public License as published by
 *  the Free Software Foundation.
 *
 *  GORpipe is distributed "AS-IS" AND WITHOUT ANY WARRANTY OF ANY KIND,
 *  INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY,
 *  NON-INFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE. See
 *  the AFFERO GNU General Public License for the complete license terms.
 *
 *  You should have received a copy of the AFFERO GNU General Public License
 *  along with GORpipe.  If not, see <http://www.gnu.org/licenses/agpl-3.0.html>
 *
 *  END_COPYRIGHT
 */
plugins {
}

// -----------------------------------------------------
// Constants
// -----------------------------------------------------

description = """GOR Gradle build script"""
version = new File("${rootDir}/VERSION").text.trim()

ext {
    getProjectFullName = {
        return getCustomProjectId()
    }

    getCustomProjectId = {
        // 2017-10-20
        // making deployments behave the same as before combining the repositories
        // revisit this when we start splitting the code into more logical modules
        customProjectId = project.path.replace(':', '-')
        customProjectId = customProjectId.startsWith('-') ? customProjectId.substring(1) : customProjectId
        return getProjectRootName() + "-" + customProjectId
    }

    getCustomGroupId = {
        // 2017-10-20
        // making deployments behave the same as before combining the repositories
        // revisit this when we start splitting the code into more logical modules
        return "com.wuxinextcode." + getProjectRootName()
    }

    getProjectRootName = {
        // 2019-05-21
        // making all deployments in the gor services have the same unique prefix to distinguish from gor and sm.
        return "gor"
    }

    /**
     * Parses the taskName and returns an array containing version, OS and architecture (64-bit or 32-bit)
     * taskName == taskNameStart + version + OS + arch
     */
    getVersionOs = { taskName, taskNameStart ->
        String versionOsArch = (taskName - taskNameStart)
        def versionArch = versionOsArch.findAll(/\d+/)
        String version = versionArch[0]
        String arch = versionArch[1] == "32" ? versionArch[1] : "64"
        String os = (taskName - (taskNameStart + version)) - arch
        return [version: version, os: os, arch: arch]
    }
}

// -----------------------------------------------------
// Plugin configuration
// -----------------------------------------------------

